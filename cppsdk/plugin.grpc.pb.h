// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plugin.proto
// Original file comments:
// plugin.proto
// Defines the gRPC interface between gaia and the user defined
// pipelines (plugins). All rpc Methods are called from Gaia and
// executed in the plugin. 
//
#ifndef GRPC_plugin_2eproto__INCLUDED
#define GRPC_plugin_2eproto__INCLUDED

#include "plugin.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace proto {

class Plugin final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.Plugin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetJobs returns a stream of Job objects.
    // Used to expose jobs to gaia.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Job>> GetJobs(::grpc::ClientContext* context, const ::proto::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Job>>(GetJobsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Job>> AsyncGetJobs(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Job>>(AsyncGetJobsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Job>> PrepareAsyncGetJobs(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Job>>(PrepareAsyncGetJobsRaw(context, request, cq));
    }
    // ExecuteJob signals the plugin to execute the given job.
    // Used to execute one job from a pipeline.
    virtual ::grpc::Status ExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::proto::JobResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>> AsyncExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>>(AsyncExecuteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>> PrepareAsyncExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>>(PrepareAsyncExecuteJobRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::proto::Job>* GetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Job>* AsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Job>* PrepareAsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>* AsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::JobResult>* PrepareAsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::proto::Job>> GetJobs(::grpc::ClientContext* context, const ::proto::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::Job>>(GetJobsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Job>> AsyncGetJobs(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Job>>(AsyncGetJobsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Job>> PrepareAsyncGetJobs(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Job>>(PrepareAsyncGetJobsRaw(context, request, cq));
    }
    ::grpc::Status ExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::proto::JobResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::JobResult>> AsyncExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::JobResult>>(AsyncExecuteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::JobResult>> PrepareAsyncExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::JobResult>>(PrepareAsyncExecuteJobRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::proto::Job>* GetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request) override;
    ::grpc::ClientAsyncReader< ::proto::Job>* AsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::Job>* PrepareAsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::JobResult>* AsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::JobResult>* PrepareAsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetJobs_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetJobs returns a stream of Job objects.
    // Used to expose jobs to gaia.
    virtual ::grpc::Status GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer);
    // ExecuteJob signals the plugin to execute the given job.
    // Used to execute one job from a pipeline.
    virtual ::grpc::Status ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJobs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJobs(::grpc::ServerContext* context, ::proto::Empty* request, ::grpc::ServerAsyncWriter< ::proto::Job>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExecuteJob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExecuteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteJob(::grpc::ServerContext* context, ::proto::Job* request, ::grpc::ServerAsyncResponseWriter< ::proto::JobResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetJobs<WithAsyncMethod_ExecuteJob<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJobs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExecuteJob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExecuteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetJobs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJobs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ExecuteJob() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExecuteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ExecuteJob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::Job, ::proto::JobResult>(std::bind(&WithStreamedUnaryMethod_ExecuteJob<BaseClass>::StreamedExecuteJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExecuteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Job,::proto::JobResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteJob<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetJobs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::proto::Empty, ::proto::Job>(std::bind(&WithSplitStreamingMethod_GetJobs<BaseClass>::StreamedGetJobs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetJobs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::Empty,::proto::Job>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetJobs<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetJobs<WithStreamedUnaryMethod_ExecuteJob<Service > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_plugin_2eproto__INCLUDED
