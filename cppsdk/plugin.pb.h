// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plugin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plugin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plugin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plugin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plugin_2eproto;
namespace proto {
class Argument;
class ArgumentDefaultTypeInternal;
extern ArgumentDefaultTypeInternal _Argument_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobResult;
class JobResultDefaultTypeInternal;
extern JobResultDefaultTypeInternal _JobResult_default_instance_;
class ManualInteraction;
class ManualInteractionDefaultTypeInternal;
extern ManualInteractionDefaultTypeInternal _ManualInteraction_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Argument* Arena::CreateMaybeMessage<::proto::Argument>(Arena*);
template<> ::proto::Empty* Arena::CreateMaybeMessage<::proto::Empty>(Arena*);
template<> ::proto::Job* Arena::CreateMaybeMessage<::proto::Job>(Arena*);
template<> ::proto::JobResult* Arena::CreateMaybeMessage<::proto::JobResult>(Arena*);
template<> ::proto::ManualInteraction* Arena::CreateMaybeMessage<::proto::ManualInteraction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Job :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(nullptr);
  }

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Job";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plugin_2eproto);
    return ::descriptor_table_plugin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependsonFieldNumber = 4,
    kArgsFieldNumber = 5,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kInteractionFieldNumber = 6,
    kUniqueIdFieldNumber = 1,
  };
  // repeated uint32 dependson = 4;
  int dependson_size() const;
  private:
  int _internal_dependson_size() const;
  public:
  void clear_dependson();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dependson(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dependson() const;
  void _internal_add_dependson(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dependson();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dependson(int index) const;
  void set_dependson(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dependson(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dependson() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dependson();

  // repeated .proto.Argument args = 5;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::proto::Argument* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Argument >*
      mutable_args();
  private:
  const ::proto::Argument& _internal_args(int index) const;
  ::proto::Argument* _internal_add_args();
  public:
  const ::proto::Argument& args(int index) const;
  ::proto::Argument* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Argument >&
      args() const;

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .proto.ManualInteraction interaction = 6;
  bool has_interaction() const;
  private:
  bool _internal_has_interaction() const;
  public:
  void clear_interaction();
  const ::proto::ManualInteraction& interaction() const;
  ::proto::ManualInteraction* release_interaction();
  ::proto::ManualInteraction* mutable_interaction();
  void set_allocated_interaction(::proto::ManualInteraction* interaction);
  private:
  const ::proto::ManualInteraction& _internal_interaction() const;
  ::proto::ManualInteraction* _internal_mutable_interaction();
  public:

  // uint32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Job)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dependson_;
  mutable std::atomic<int> _dependson_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Argument > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::proto::ManualInteraction* interaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_2eproto;
};
// -------------------------------------------------------------------

class Argument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);
  Argument(Argument&& from) noexcept
    : Argument() {
    *this = ::std::move(from);
  }

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }
  inline Argument& operator=(Argument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Argument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Argument* internal_default_instance() {
    return reinterpret_cast<const Argument*>(
               &_Argument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Argument& a, Argument& b) {
    a.Swap(&b);
  }
  inline void Swap(Argument* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Argument* New() const final {
    return CreateMaybeMessage<Argument>(nullptr);
  }

  Argument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Argument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Argument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Argument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plugin_2eproto);
    return ::descriptor_table_plugin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:proto.Argument)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_2eproto;
};
// -------------------------------------------------------------------

class ManualInteraction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ManualInteraction) */ {
 public:
  ManualInteraction();
  virtual ~ManualInteraction();

  ManualInteraction(const ManualInteraction& from);
  ManualInteraction(ManualInteraction&& from) noexcept
    : ManualInteraction() {
    *this = ::std::move(from);
  }

  inline ManualInteraction& operator=(const ManualInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualInteraction& operator=(ManualInteraction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualInteraction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualInteraction* internal_default_instance() {
    return reinterpret_cast<const ManualInteraction*>(
               &_ManualInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ManualInteraction& a, ManualInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualInteraction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualInteraction* New() const final {
    return CreateMaybeMessage<ManualInteraction>(nullptr);
  }

  ManualInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualInteraction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualInteraction& from);
  void MergeFrom(const ManualInteraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualInteraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ManualInteraction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plugin_2eproto);
    return ::descriptor_table_plugin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:proto.ManualInteraction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_2eproto;
};
// -------------------------------------------------------------------

class JobResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.JobResult) */ {
 public:
  JobResult();
  virtual ~JobResult();

  JobResult(const JobResult& from);
  JobResult(JobResult&& from) noexcept
    : JobResult() {
    *this = ::std::move(from);
  }

  inline JobResult& operator=(const JobResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResult& operator=(JobResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResult* internal_default_instance() {
    return reinterpret_cast<const JobResult*>(
               &_JobResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JobResult& a, JobResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResult* New() const final {
    return CreateMaybeMessage<JobResult>(nullptr);
  }

  JobResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResult& from);
  void MergeFrom(const JobResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.JobResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plugin_2eproto);
    return ::descriptor_table_plugin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kUniqueIdFieldNumber = 1,
    kFailedFieldNumber = 2,
    kExitPipelineFieldNumber = 3,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool failed = 2;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // bool exit_pipeline = 3;
  void clear_exit_pipeline();
  bool exit_pipeline() const;
  void set_exit_pipeline(bool value);
  private:
  bool _internal_exit_pipeline() const;
  void _internal_set_exit_pipeline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.JobResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id_;
  bool failed_;
  bool exit_pipeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_2eproto;
};
// -------------------------------------------------------------------

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plugin_2eproto);
    return ::descriptor_table_plugin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Job

// uint32 unique_id = 1;
inline void Job::clear_unique_id() {
  unique_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::unique_id() const {
  // @@protoc_insertion_point(field_get:proto.Job.unique_id)
  return _internal_unique_id();
}
inline void Job::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_id_ = value;
}
inline void Job::set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:proto.Job.unique_id)
}

// string title = 2;
inline void Job::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Job::title() const {
  // @@protoc_insertion_point(field_get:proto.Job.title)
  return _internal_title();
}
inline void Job::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:proto.Job.title)
}
inline std::string* Job::mutable_title() {
  // @@protoc_insertion_point(field_mutable:proto.Job.title)
  return _internal_mutable_title();
}
inline const std::string& Job::_internal_title() const {
  return title_.GetNoArena();
}
inline void Job::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Job::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Job.title)
}
inline void Job::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Job.title)
}
inline void Job::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Job.title)
}
inline std::string* Job::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Job::release_title() {
  // @@protoc_insertion_point(field_release:proto.Job.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.Job.title)
}

// string description = 3;
inline void Job::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Job::description() const {
  // @@protoc_insertion_point(field_get:proto.Job.description)
  return _internal_description();
}
inline void Job::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:proto.Job.description)
}
inline std::string* Job::mutable_description() {
  // @@protoc_insertion_point(field_mutable:proto.Job.description)
  return _internal_mutable_description();
}
inline const std::string& Job::_internal_description() const {
  return description_.GetNoArena();
}
inline void Job::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Job::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Job.description)
}
inline void Job::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Job.description)
}
inline void Job::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Job.description)
}
inline std::string* Job::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Job::release_description() {
  // @@protoc_insertion_point(field_release:proto.Job.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.Job.description)
}

// repeated uint32 dependson = 4;
inline int Job::_internal_dependson_size() const {
  return dependson_.size();
}
inline int Job::dependson_size() const {
  return _internal_dependson_size();
}
inline void Job::clear_dependson() {
  dependson_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::_internal_dependson(int index) const {
  return dependson_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::dependson(int index) const {
  // @@protoc_insertion_point(field_get:proto.Job.dependson)
  return _internal_dependson(index);
}
inline void Job::set_dependson(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dependson_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Job.dependson)
}
inline void Job::_internal_add_dependson(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dependson_.Add(value);
}
inline void Job::add_dependson(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dependson(value);
  // @@protoc_insertion_point(field_add:proto.Job.dependson)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Job::_internal_dependson() const {
  return dependson_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Job::dependson() const {
  // @@protoc_insertion_point(field_list:proto.Job.dependson)
  return _internal_dependson();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Job::_internal_mutable_dependson() {
  return &dependson_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Job::mutable_dependson() {
  // @@protoc_insertion_point(field_mutable_list:proto.Job.dependson)
  return _internal_mutable_dependson();
}

// repeated .proto.Argument args = 5;
inline int Job::_internal_args_size() const {
  return args_.size();
}
inline int Job::args_size() const {
  return _internal_args_size();
}
inline void Job::clear_args() {
  args_.Clear();
}
inline ::proto::Argument* Job::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Job.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Argument >*
Job::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:proto.Job.args)
  return &args_;
}
inline const ::proto::Argument& Job::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::proto::Argument& Job::args(int index) const {
  // @@protoc_insertion_point(field_get:proto.Job.args)
  return _internal_args(index);
}
inline ::proto::Argument* Job::_internal_add_args() {
  return args_.Add();
}
inline ::proto::Argument* Job::add_args() {
  // @@protoc_insertion_point(field_add:proto.Job.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Argument >&
Job::args() const {
  // @@protoc_insertion_point(field_list:proto.Job.args)
  return args_;
}

// .proto.ManualInteraction interaction = 6;
inline bool Job::_internal_has_interaction() const {
  return this != internal_default_instance() && interaction_ != nullptr;
}
inline bool Job::has_interaction() const {
  return _internal_has_interaction();
}
inline void Job::clear_interaction() {
  if (GetArenaNoVirtual() == nullptr && interaction_ != nullptr) {
    delete interaction_;
  }
  interaction_ = nullptr;
}
inline const ::proto::ManualInteraction& Job::_internal_interaction() const {
  const ::proto::ManualInteraction* p = interaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::ManualInteraction*>(
      &::proto::_ManualInteraction_default_instance_);
}
inline const ::proto::ManualInteraction& Job::interaction() const {
  // @@protoc_insertion_point(field_get:proto.Job.interaction)
  return _internal_interaction();
}
inline ::proto::ManualInteraction* Job::release_interaction() {
  // @@protoc_insertion_point(field_release:proto.Job.interaction)
  
  ::proto::ManualInteraction* temp = interaction_;
  interaction_ = nullptr;
  return temp;
}
inline ::proto::ManualInteraction* Job::_internal_mutable_interaction() {
  
  if (interaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ManualInteraction>(GetArenaNoVirtual());
    interaction_ = p;
  }
  return interaction_;
}
inline ::proto::ManualInteraction* Job::mutable_interaction() {
  // @@protoc_insertion_point(field_mutable:proto.Job.interaction)
  return _internal_mutable_interaction();
}
inline void Job::set_allocated_interaction(::proto::ManualInteraction* interaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interaction_;
  }
  if (interaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interaction, submessage_arena);
    }
    
  } else {
    
  }
  interaction_ = interaction;
  // @@protoc_insertion_point(field_set_allocated:proto.Job.interaction)
}

// -------------------------------------------------------------------

// Argument

// string description = 1;
inline void Argument::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Argument::description() const {
  // @@protoc_insertion_point(field_get:proto.Argument.description)
  return _internal_description();
}
inline void Argument::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:proto.Argument.description)
}
inline std::string* Argument::mutable_description() {
  // @@protoc_insertion_point(field_mutable:proto.Argument.description)
  return _internal_mutable_description();
}
inline const std::string& Argument::_internal_description() const {
  return description_.GetNoArena();
}
inline void Argument::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Argument::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Argument.description)
}
inline void Argument::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Argument.description)
}
inline void Argument::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Argument.description)
}
inline std::string* Argument::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Argument::release_description() {
  // @@protoc_insertion_point(field_release:proto.Argument.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.Argument.description)
}

// string type = 2;
inline void Argument::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Argument::type() const {
  // @@protoc_insertion_point(field_get:proto.Argument.type)
  return _internal_type();
}
inline void Argument::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.Argument.type)
}
inline std::string* Argument::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.Argument.type)
  return _internal_mutable_type();
}
inline const std::string& Argument::_internal_type() const {
  return type_.GetNoArena();
}
inline void Argument::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Argument::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Argument.type)
}
inline void Argument::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Argument.type)
}
inline void Argument::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Argument.type)
}
inline std::string* Argument::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Argument::release_type() {
  // @@protoc_insertion_point(field_release:proto.Argument.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.Argument.type)
}

// string key = 3;
inline void Argument::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Argument::key() const {
  // @@protoc_insertion_point(field_get:proto.Argument.key)
  return _internal_key();
}
inline void Argument::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:proto.Argument.key)
}
inline std::string* Argument::mutable_key() {
  // @@protoc_insertion_point(field_mutable:proto.Argument.key)
  return _internal_mutable_key();
}
inline const std::string& Argument::_internal_key() const {
  return key_.GetNoArena();
}
inline void Argument::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Argument::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Argument.key)
}
inline void Argument::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Argument.key)
}
inline void Argument::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Argument.key)
}
inline std::string* Argument::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Argument::release_key() {
  // @@protoc_insertion_point(field_release:proto.Argument.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.Argument.key)
}

// string value = 4;
inline void Argument::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Argument::value() const {
  // @@protoc_insertion_point(field_get:proto.Argument.value)
  return _internal_value();
}
inline void Argument::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.Argument.value)
}
inline std::string* Argument::mutable_value() {
  // @@protoc_insertion_point(field_mutable:proto.Argument.value)
  return _internal_mutable_value();
}
inline const std::string& Argument::_internal_value() const {
  return value_.GetNoArena();
}
inline void Argument::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Argument::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Argument.value)
}
inline void Argument::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Argument.value)
}
inline void Argument::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Argument.value)
}
inline std::string* Argument::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Argument::release_value() {
  // @@protoc_insertion_point(field_release:proto.Argument.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.Argument.value)
}

// -------------------------------------------------------------------

// ManualInteraction

// string description = 1;
inline void ManualInteraction::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ManualInteraction::description() const {
  // @@protoc_insertion_point(field_get:proto.ManualInteraction.description)
  return _internal_description();
}
inline void ManualInteraction::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:proto.ManualInteraction.description)
}
inline std::string* ManualInteraction::mutable_description() {
  // @@protoc_insertion_point(field_mutable:proto.ManualInteraction.description)
  return _internal_mutable_description();
}
inline const std::string& ManualInteraction::_internal_description() const {
  return description_.GetNoArena();
}
inline void ManualInteraction::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualInteraction::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ManualInteraction.description)
}
inline void ManualInteraction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ManualInteraction.description)
}
inline void ManualInteraction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ManualInteraction.description)
}
inline std::string* ManualInteraction::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualInteraction::release_description() {
  // @@protoc_insertion_point(field_release:proto.ManualInteraction.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualInteraction::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.ManualInteraction.description)
}

// string type = 2;
inline void ManualInteraction::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ManualInteraction::type() const {
  // @@protoc_insertion_point(field_get:proto.ManualInteraction.type)
  return _internal_type();
}
inline void ManualInteraction::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.ManualInteraction.type)
}
inline std::string* ManualInteraction::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.ManualInteraction.type)
  return _internal_mutable_type();
}
inline const std::string& ManualInteraction::_internal_type() const {
  return type_.GetNoArena();
}
inline void ManualInteraction::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualInteraction::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ManualInteraction.type)
}
inline void ManualInteraction::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ManualInteraction.type)
}
inline void ManualInteraction::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ManualInteraction.type)
}
inline std::string* ManualInteraction::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualInteraction::release_type() {
  // @@protoc_insertion_point(field_release:proto.ManualInteraction.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualInteraction::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.ManualInteraction.type)
}

// string value = 3;
inline void ManualInteraction::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ManualInteraction::value() const {
  // @@protoc_insertion_point(field_get:proto.ManualInteraction.value)
  return _internal_value();
}
inline void ManualInteraction::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.ManualInteraction.value)
}
inline std::string* ManualInteraction::mutable_value() {
  // @@protoc_insertion_point(field_mutable:proto.ManualInteraction.value)
  return _internal_mutable_value();
}
inline const std::string& ManualInteraction::_internal_value() const {
  return value_.GetNoArena();
}
inline void ManualInteraction::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualInteraction::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ManualInteraction.value)
}
inline void ManualInteraction::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ManualInteraction.value)
}
inline void ManualInteraction::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ManualInteraction.value)
}
inline std::string* ManualInteraction::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualInteraction::release_value() {
  // @@protoc_insertion_point(field_release:proto.ManualInteraction.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualInteraction::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.ManualInteraction.value)
}

// -------------------------------------------------------------------

// JobResult

// uint32 unique_id = 1;
inline void JobResult::clear_unique_id() {
  unique_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobResult::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobResult::unique_id() const {
  // @@protoc_insertion_point(field_get:proto.JobResult.unique_id)
  return _internal_unique_id();
}
inline void JobResult::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_id_ = value;
}
inline void JobResult::set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:proto.JobResult.unique_id)
}

// bool failed = 2;
inline void JobResult::clear_failed() {
  failed_ = false;
}
inline bool JobResult::_internal_failed() const {
  return failed_;
}
inline bool JobResult::failed() const {
  // @@protoc_insertion_point(field_get:proto.JobResult.failed)
  return _internal_failed();
}
inline void JobResult::_internal_set_failed(bool value) {
  
  failed_ = value;
}
inline void JobResult::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:proto.JobResult.failed)
}

// bool exit_pipeline = 3;
inline void JobResult::clear_exit_pipeline() {
  exit_pipeline_ = false;
}
inline bool JobResult::_internal_exit_pipeline() const {
  return exit_pipeline_;
}
inline bool JobResult::exit_pipeline() const {
  // @@protoc_insertion_point(field_get:proto.JobResult.exit_pipeline)
  return _internal_exit_pipeline();
}
inline void JobResult::_internal_set_exit_pipeline(bool value) {
  
  exit_pipeline_ = value;
}
inline void JobResult::set_exit_pipeline(bool value) {
  _internal_set_exit_pipeline(value);
  // @@protoc_insertion_point(field_set:proto.JobResult.exit_pipeline)
}

// string message = 4;
inline void JobResult::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JobResult::message() const {
  // @@protoc_insertion_point(field_get:proto.JobResult.message)
  return _internal_message();
}
inline void JobResult::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:proto.JobResult.message)
}
inline std::string* JobResult::mutable_message() {
  // @@protoc_insertion_point(field_mutable:proto.JobResult.message)
  return _internal_mutable_message();
}
inline const std::string& JobResult::_internal_message() const {
  return message_.GetNoArena();
}
inline void JobResult::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobResult::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.JobResult.message)
}
inline void JobResult::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JobResult.message)
}
inline void JobResult::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JobResult.message)
}
inline std::string* JobResult::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobResult::release_message() {
  // @@protoc_insertion_point(field_release:proto.JobResult.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.JobResult.message)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plugin_2eproto
