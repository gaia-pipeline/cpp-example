// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plugin.proto

#include "plugin.pb.h"
#include "plugin.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* Plugin_method_names[] = {
  "/proto.Plugin/GetJobs",
  "/proto.Plugin/ExecuteJob",
};

std::unique_ptr< Plugin::Stub> Plugin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Plugin::Stub> stub(new Plugin::Stub(channel));
  return stub;
}

Plugin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetJobs_(Plugin_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteJob_(Plugin_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::proto::Job>* Plugin::Stub::GetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::Job>::Create(channel_.get(), rpcmethod_GetJobs_, context, request);
}

::grpc::ClientAsyncReader< ::proto::Job>* Plugin::Stub::AsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Job>::Create(channel_.get(), cq, rpcmethod_GetJobs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::Job>* Plugin::Stub::PrepareAsyncGetJobsRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Job>::Create(channel_.get(), cq, rpcmethod_GetJobs_, context, request, false, nullptr);
}

::grpc::Status Plugin::Stub::ExecuteJob(::grpc::ClientContext* context, const ::proto::Job& request, ::proto::JobResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::proto::JobResult>* Plugin::Stub::AsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::JobResult>::Create(channel_.get(), cq, rpcmethod_ExecuteJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::JobResult>* Plugin::Stub::PrepareAsyncExecuteJobRaw(::grpc::ClientContext* context, const ::proto::Job& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::JobResult>::Create(channel_.get(), cq, rpcmethod_ExecuteJob_, context, request, false);
}

Plugin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Plugin_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Plugin::Service, ::proto::Empty, ::proto::Job>(
          std::mem_fn(&Plugin::Service::GetJobs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Plugin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Plugin::Service, ::proto::Job, ::proto::JobResult>(
          std::mem_fn(&Plugin::Service::ExecuteJob), this)));
}

Plugin::Service::~Service() {
}

::grpc::Status Plugin::Service::GetJobs(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Job>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Plugin::Service::ExecuteJob(::grpc::ServerContext* context, const ::proto::Job* request, ::proto::JobResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

